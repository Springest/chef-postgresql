#!/bin/bash
# Execute command by failover.
# special values:  %d = node id
#                  %h = host name
#                  %p = port number
#                  %D = database cluster path
#                  %m = new master node id
#                  %H = new master node host name
#                  %M = old master node id
#                  %P = old primary node id
#                  %% = '%' character
failed_node_id=$1
failed_host_name=$2
failed_port=$3
failed_db_cluster=$4
new_master_id=$5
new_master_host_name=$6
old_master_id=$7
old_primary_node_id=$8

SSH=/usr/bin/ssh
LOGGER="log /var/log/postgresql/pgpool_failover.log"
trigger_cmd="/usr/bin/pg_ctlcluster promote"

BASENAME=`/usr/bin/basename $0`
ID=`/usr/bin/id -un`

log()
{
echo $(date +"%D %T") $2 >> $1
}

if [ $failed_node_id = $old_primary_node_id ]; then  # I was the master and I failed, but now I'm back
  $LOGGER "Executing $BASENAME as user $ID"
  $LOGGER "Triggering failback on remote PostgreSQL server with hostname $failed_host_name"
  /usr/sbin/pcp_detach_node 10 localhost 9898 postgres <%= node["postgres"]["pgpool2"]["users"]["postgres"] %> $failed_node_id
  /usr/sbin/pgpool_remote_stop $failed_host_name $failed_db_cluster
  /usr/sbin/pcp_recovery_node 172800 localhost 9898 postgres <%= node["postgres"]["pgpool2"]["users"]["postgres"] %> $failed_node_id
  $LOGGER "Remote PostgeSQL failback finished on $failed_host_name. Welcome back."
fi
