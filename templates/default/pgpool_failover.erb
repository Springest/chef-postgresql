#!/bin/bash
# Execute command by failover.
# special values:  %d = node id
#                  %h = host name
#                  %p = port number
#                  %D = database cluster path
#                  %m = new master node id
#                  %H = new master node host name
#                  %M = old master node id
#                  %P = old primary node id
#                  %% = '%' character
failed_node_id=$1
failed_host_name=$2
failed_port=$3
failed_db_cluster=$4
new_master_id=$5
new_master_host_name=$6
old_master_id=$7
old_primary_node_id=$8

SSH=/usr/bin/ssh
LOGGER="log /var/log/postgresql/pgpool_failover.log"
trigger_cmd="touch /tmp/pg_failover_trigger"

BASENAME=`/usr/bin/basename $0`
ID=`/usr/bin/id -un`

log()
{
echo $(date +"%D %T") $2 >> $1
}

$LOGGER "failed_node_id=$1"
$LOGGER "failed_host_name=$2"
$LOGGER "failed_port=$3"
$LOGGER "failed_db_cluster=$4"
$LOGGER "new_master_id=$5"
$LOGGER "new_master_host_name=$6"
$LOGGER "old_master_id=$7"
$LOGGER "old_primary_node_id=$8"

if [ $failed_node_id = $old_primary_node_id ]; then  # master failed
  $LOGGER "Executing $BASENAME as user $ID"
  $LOGGER "Triggering failover on remote PostgreSQL server with hostname $new_master_host_name"
  $SSH -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $new_master_host_name $trigger_cmd
  $SSH -o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null $new_master_host_name rm -f $failed_db_cluster/recovery.conf
  $LOGGER "Remote PostgeSQL failover triggered on $new_master_host_name."
fi
